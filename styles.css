* {
  font-family: "courier new";
  box-sizing: border-box;
}

body,
html,
app {
  margin: 0px;
  padding: 0px;
  overflow: hidden;
  border: none;
}
input {
  outline: none;
}
button,
input[type="checkbox"] {
  cursor: pointer;
}
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type="number"] {
  -moz-appearance: textfield;
}

component select, component select option {
  border: 1px solid green;
  border-radius: 5px;
  background: rgba(0, 0, 0, 0.5) !important;
  max-width: calc(100% - 7px);
  outline: none;
  color: lightgreen;
  height: 21px;
  font-size: 11px;
  letter-spacing: 1px;
  text-transform: capitalize;
  padding-left: 2px;
}


component {
  color: lightgreen;
}

app canvas.linesCanvas {
  z-index: 1;
  position: absolute;
  top: 0px;
  /* width: 100%;
  height: 100%; */
  left: 0px;
  background-color: transparent;
  pointer-events: none;
  touch-action: none;
}

.line {
  position: absolute;
  width: 1px;
  margin-top: -1px;
  background-color: red;
  pointer-events: none;
  border-radius: 31px;
  border: 2px solid darkred;
  touch-action: none;
}

app {
  --scale:1;
  position: absolute;
  left: 0px;
  top: 0px;
  width: 100vw;
  background-image: url(carpet.jpg);
  background-position: calc(0.25 * calc(var(--mainContainerX) + 500px))
    calc(0.25 * calc(var(--mainContainerY) + 500px));
    background-size: calc(calc(95 + 5* var(--scale))* 1%) auto;
  height: 100vh;
  border-top: 1px solid gray;
}

app .mainContainer {
  position: absolute;
  width: 400vw;
  height: 400vh;
  z-index: 1;
  top: -500px;
  left: -500px;
  filter:blur(0px);
  background-size: 25%;
  transition:filter 0.1s ease-out;
}

.buttons {
  flex-wrap: wrap;
  position: fixed;
  top: 5px;
  left: 5px;
  /* transform: translateX(-50%); */
  width: 200px;
  display: flex;
  gap: 2px;
  /* text-align: left; */
  z-index: 999;
  pointer-events: none;
  touch-action: none;
  flex-direction: column;
  transform: translateX(-120%);
  transition: transform 250ms;
}
.buttons.visible {
  transform: translateX(0%);
}

.buttons button {
  pointer-events: all;
  touch-action: auto;
  text-align: left;
  width: 160px;
  background: #000900;
}

.buttons hr {
  height: 4px;
  line-height: 4px;
  padding: 0px;
  margin: 0px;
  border: none;
}

component.text textarea {
  width: 100%;
  height: 100%;
}

component {
  
  /* background-image: url(leather.jpg); */
  background-size: 225%;
  background-position-x: var(--posX);
  background-position-y: var(--posY);
  box-shadow: 0px 0px 25px rgba(0, 255, 0, 0.2);
  /* pointer-events: none; */
  position: absolute;
  background-color: white;
  border-radius: 5px;
  border: 1px solid green;
  width: 180px;
  height: 100px;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(5px);
  overflow: hidden;
}

component.active {
  outline: 3px solid lightgreen;
}

component icon {
  position: absolute;
  left: 3px;
  top: 5px;
  width: 20px;
  filter: sepia(100%) saturate(60%) brightness(80%) hue-rotate(68deg);
  height: 20px;
}
component.mic icon:after {
  content: "üé§";
}
component.webcamplayer icon:after {
  content: "ü§≥üèª";

}


component.peakdetectorcomponent icon:after {
  content: "‚õ∞Ô∏è";

}

component.compressor icon:after {
  content: "‚ûó";
}



component.WebRTCSender icon:after {
  content: "üì≠";
}
component.reverb icon:after {
  content: "‚õ™";
}
component.constantvaluenode icon:after {
  content: "üÖ∫";
}
component.sequencer icon:after {
  content: "üìà";
}

component.audioplayer icon:after {
  content: "üé∂";
}

component.KeyboardComponent  icon:after {
  content: "‚å®";
}


component.WebRTCReceiver icon:after {
  content: "üì®";
}
component.memorycomponent icon:after {
  content: "üìº";
}
component.bpmoutputcomponent icon:after {
  content: "üéµ";
}

component.distortion icon:after {
  content: "ü§ò";
}

component.ImagePlayerWorkletVersion  icon:after {
  content: "üñºÔ∏è";
}

component.merger icon:after {
  content: "üç≤";
}

component.imagemaker icon:after {
  content: "üì∑";
}

component.output icon:after {
  content: "üîä";
}

component.numberdisplay icon:after {
  content: "üî¢";
}

component.joystickcomponent icon:after {
  content: "üéÆ";
}

component.oscillator icon:after {
  content: "üö¥üèø";
}

component.NoiseGenWithWorklet icon:after {
  content: "üëæ";
}

component.mouse icon:after {
  content: "üñ±Ô∏è";
}

component.amp icon:after {
  content: "üì¢";
}

component.delay icon:after {
  content: "‚è∞";
}

component.filter icon:after {
  content: "ü§ñ";
}
component.midi icon:after {
  content: "üéπ";
}
component.midifileplayer icon:after {
  content: "üéº";
}
component.CustomProcessorComponent icon:after {
  content: "üß©";
}




component.envelopegenerator icon:after {
  
  content: "„ÄΩÔ∏è";
  
}
component.Midi {
  height: 205px;
  width: 160px;
}
component.NumberDisplayComponent {
  height: 32px;
  width: 220px;
}

component.memorycomponent {
  height: 60px;
}

component.joystickcomponent {
  height: 475px;
}

component.CustomProcessorComponent {
  height: 210px;
}

textarea {
  height: 76px;
  width: calc(100% - 10px);
  left: 5px;
  background: rgba(0, 0, 0, 0.5);
  position: relative;
  border-color: green;
  color: white;
  border-radius: 5px;
  border-left-width: 1px;
  outline: lightgreen;
  border-right-width: 1px;
  border-top-width: 1px;
  margin-top: 5px;
  resize: none;
}

component.text textarea {
left:0px;
width:100%;
margin:0;
}

component.multiplexor {
  height: 280px;
}

component .display {
  margin-top: 30px;
  margin-left: 5px;
  font-size:14px;
}

component.multiplexor .display {
  position: absolute;
  right: 6px;
  font-weight: bold;
  font-size: 24px;
  bottom: 22px;
  margin: 0 !important;
}

component p {
  padding: 5px;
  margin-top: 0px;
  font-size: 11px;
  margin-bottom: 5px;
}

component.envelopegenerator {
  height: 180px;
}
component.BPMOutputComponent {
  height: 34px;
  width: 115px;
}

component.KeyboardComponent outputs {
  flex-direction: row;
}

component.KeyboardComponent input.outputButton:after {
  content: var(--label);
  position: absolute;
  top: -12px;
  left: unset !important;
  right: unset !important;
  width: min-content;
}

component input.outputButton.active:after {
  color: orange !important;
}

component.imagemaker {
  width: 320px;
  height: 200px;
}

component.imagemaker button.togglefullscreen {
  width: max-content;
  margin: 5px;
  right: 0px;
  position: absolute;
}

component.imagemaker canvas {
  bottom: 2px;
  right: 2px;
  position: absolute;
  border: 1px solid gray;
  pointer-events: none;
  touch-action: none;
}

component.mouse select,
component.imagePlayer select {
  position: absolute;
  bottom: 5px;
  left: 5px;
}

component.ImagePlayerWorkletVersion canvas {
  z-index: 0;
  left: 2px;
  top: 2px;
  position: absolute;
  width: calc(100% - 4px);
  height: calc(100% - 4px);
  pointer-events: none;
}

component.sequencer {
  width: 300px;
  height: 280px;
  padding-top: 10px;
}

component.sequencer div.buttonsContainer {
  display: flex;
  gap: 1px;
  margin-top: 20px;
  flex-wrap: wrap;
  width: 275px;
  padding: 5px;
}

component input.outputButton:after {
  content: var(--label);
  position: absolute;
  width: 100px;
  font-size: 11px;
  left: -100px;
  text-align: right;
  line-height: 11px;
  pointer-events: none;
  touch-action: none;
  text-shadow: -1px 0px 3px black;
}

component.sequencer .buttonsContainer .seqButton {
  width: 15px;
  height: 15px;
  border: 1px solid green;
  background: rgba(0, 0, 0, 0.5);
}
component.sequencer .buttonsContainer .seqButton:hover {
  background: #003300;
  border: 1px solid lightgreen;
}

component.sequencer .buttonsContainer .seqButton.active {
  background: orange;
}

component input[type="file"] {
  position: relative;
  top: 5px;
  left: 5px;
  z-index: 99;
  display: none;

  width: 142px;
  overflow: visible;
  height: 35px;
  border: none;
  outline: none;
}



component .inputsDiv {
  position: absolute;
  overflow: hidden;
  width: calc(100% - 4px);
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: flex-end;
  align-content: flex-start;
  left: 5px;
  bottom: 5px;
  gap: 3px;
  pointer-events: none;
  touch-action: none;
}

component .inputsDiv * {
  pointer-events: all;
  touch-action: auto;
}

outputs {
  position: absolute;
  display: block;
  right: 2px;
  display: flex;
  flex-direction: column;
  bottom: 2px;
}

component .outputButton {
  /* position: absolute; */
  overflow: hidden;
  right: 5px;
  bottom: 5px;
  box-shadow: inset 0px 0px 5px 10px black;
  width: 10px;
  height: 10px;

  cursor: pointer;
  border-radius: 5px;
  /* padding: 6px; */
  outline: 1px solid green;
}

component .outputButton:hover {
  box-shadow: inset 0px 0px 5px 10px #003300;
  outline: 1px solid lightgreen;
}

component button.playButton, component .triggerInputFile {
  display: block;
  position: relative;
  left: 5px;
  height: 30px;
  top: 36px;
  text-overflow: ellipsis;
  overflow: hidden;
  width: calc(100% - 10px);
  white-space: nowrap;
}





component .inputsDiv button.input,
button {
  width: 90px;
  height: 20px;
  overflow: hidden;
  cursor: pointer;
  background: rgba(0, 0, 0, 0.5);
  border: 1px solid green;
  color: lightgreen;
  text-align: left;
  border-radius: 5px;
  font-size: 11px;
}
component .inputsDiv button.input:hover {
  background: #000f00;
  border: 1px solid lightgreen;
}

component .inputsDiv audioparamrow input[type="number"],
component input[type="text"] {
  width: calc(100% - 100px);
  overflow: hidden;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 5px;
  border: 1px solid green;
  color: white;
}
component.Compressor {
  height: 177px;
}
component.filter {
  height: 174px;
}

component.AudioPlayer {
  height: 166px;
  width: 150px;
}

audioparamrow {
  display: flex;
  gap: 3px;
  flex-direction: row;
}

component.visualizer canvas {
  position: absolute;
  left: 2px;
  top: 2px;
  pointer-events: none;
}

component.numberdisplaycomponent .display,
component.memorycomponent .display,
component.bpmoutputcomponent .display {
  font-size: 20px;
  display: flex;
  justify-content: flex-end;
  margin-right: 15px;
  align-items: center;
  color: lightgreen;
  margin-top: 4px;
}
component.bpmoutputcomponent .display {
  text-align: left;
  margin-right: unset;
  left: 40px;
  position: absolute;
  bottom: 1px;
}

component.countercomponent .display {
  position: absolute;
  right: 25px;
  bottom: 3px;
}
component.memorycomponent .display {
  margin-right: 0px;
  position: absolute;
  right: 27px;
  text-align: right;
  bottom: 2px;
}

/* component.joystickcomponent input.outputButton:after {
  content: var(--letter);
  left: -19px;
  position: absolute;
  text-align: right;
  width: 20px;
} */

component.WebRTCSender,
component.WebRTCReceiver {
  padding-left: 5px;
  padding-top: 38px;
  height: 115px;
}
component.WebRTCReceiver {
  padding-top: 30px;
  height: 123px;
}

component.WebRTCSender input {
  width: calc(100% - 5px);
}

component.WebRTCReceiver input[type="text"] {
  width: 100%;
}

component.WebRTCReceiver:not(.mine),
component.WebRTCSender:not(.mine) {
  background-image: none;
  background: #eeb3c8;
}
component.WebRTCReceiver:not(.mine) *,
component.WebRTCSender:not(.mine) * {
  pointer-events: none;
  touch-action: none;
}

*:after {
  color: lightgreen;
}

app > .mainContainer > canvas.imgMakerCanvas {
  width: 100vw;
  height: 100vw;
  left: 0px;
  position: fixed;
  z-index: -1;
  top: 0px;
}

app .messageBox {
  top: -50vh;
  width: max-content;
  padding: 10px;
  color: lightgreen;
  max-width: 450px;
  height: max-content;
  position: fixed;
  right: 10px;
  background-color: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(5px);
  border-radius: 5px;
  border: 3px solid gray;
  transition: all 0.35s ease-in-out;
}

app .messageBox.visible {
  top: 10px;
}

component button.infoButton {
  width: 16px;
  position: absolute;
  left: 30px;
  font-size: 14px;
  top: 7px;  
  padding: 0px;
  height: 18px;
  padding-left: 3px;
}

component.constantvaluenode {
  height: 36px;
}

component.constantvaluenode button.input.offset {
  display: none;
}
component.constantvaluenode input.offset {
  margin: 0 auto;
  margin-bottom: 2px;
}

component.rackcover {
  z-index: 2;
  resize: both;
  box-shadow: none;
  /* pointer-events: none; */

  border: none;
  width: 180px;
  height: 100px;
  background-position: calc(100% - var(--posX)) calc(100% - var(--posY));
  background-image: url(aluminium.jpg);
  backdrop-filter: none;
}

component .deleteButton {
  width: 19px;
  position: absolute;
  right: 5px;
  font-size: 10px;
  display: none;
  top: 5px;
  padding: 0px;
  height: 18px;
  border-color: #aa0000;
  padding-left: 2px;
}

component:hover .deleteButton {
  display: block;
}

component .deleteButton:hover {
  background: rgba(250, 0, 0, 0.5);
}

component.Oscillator {
  height: 103px;
}

.ImagePlayerWorkletVersion button.triggerInputFile {
  width: max-content;
}
.webcamplayer canvas {
  width: 100%;
  height: 100%;
}
.mic select {
  margin-top: 33px;
  left: 5px;
  position: relative;
  width: calc(100% - 10px);
}

app.zooming  .mainContainer{
  filter:blur(calc(var(--scale) * 6px) );
  
}